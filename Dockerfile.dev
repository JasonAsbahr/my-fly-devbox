FROM ubuntu:22.04

# Install base system packages
RUN apt-get update && \
    apt-get install -y \
    # Core utilities
    openssh-server mosh sudo vim git curl wget build-essential \
    # Python 3.11
    software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.11 python3.11-venv python3.11-dev python3-pip \
    # Database clients
    postgresql-client redis-tools \
    # Development tools
    jq ripgrep fd-find bat tmux htop tree neovim \
    # Docker dependencies
    ca-certificates gnupg lsb-release && \
    # Clean up
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Docker
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install Node.js 18
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn pnpm && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Create dev user
RUN useradd -m -s /bin/bash dev && \
    echo "dev:password" | chpasswd && \
    adduser dev sudo && \
    usermod -aG docker dev

# SSH configuration
RUN mkdir /var/run/sshd && \
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config

# Create persistent storage mount point
RUN mkdir -p /data && chown dev:dev /data

# Switch to dev user for user-specific installations
USER dev
WORKDIR /home/dev

# Install UV (Python package manager)
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc

# Install pipx
RUN python3.11 -m pip install --user pipx && \
    python3.11 -m pipx ensurepath

# Create symlinks to persistent storage (will be set up on first run)
RUN echo '#!/bin/bash' > ~/.setup_persistent.sh && \
    echo '# Set up persistent storage links on first run' >> ~/.setup_persistent.sh && \
    echo 'if [ ! -L "$HOME/.config" ]; then' >> ~/.setup_persistent.sh && \
    echo '  mkdir -p /data/.config /data/.cache /data/.local /data/projects /data/tools' >> ~/.setup_persistent.sh && \
    echo '  rm -rf ~/.config ~/.cache ~/.local' >> ~/.setup_persistent.sh && \
    echo '  ln -sf /data/.config ~/.config' >> ~/.setup_persistent.sh && \
    echo '  ln -sf /data/.cache ~/.cache' >> ~/.setup_persistent.sh && \
    echo '  ln -sf /data/.local ~/.local' >> ~/.setup_persistent.sh && \
    echo '  touch /data/.setup_done' >> ~/.setup_persistent.sh && \
    echo 'fi' >> ~/.setup_persistent.sh && \
    echo '# Source UV environment' >> ~/.setup_persistent.sh && \
    echo '[ -f "$HOME/.local/bin/env" ] && source "$HOME/.local/bin/env"' >> ~/.setup_persistent.sh && \
    chmod +x ~/.setup_persistent.sh && \
    echo 'source ~/.setup_persistent.sh' >> ~/.bashrc

# Switch back to root for the entrypoint
USER root

# Expose ports
EXPOSE 22 60000-61000/udp

# Create entrypoint script
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'service ssh start' >> /entrypoint.sh && \
    echo 'su - dev -c "~/.setup_persistent.sh"' >> /entrypoint.sh && \
    echo '/usr/sbin/sshd -D' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

CMD ["/entrypoint.sh"]